
PART I

# a)   
  p0 = 0.25
  p1 = 0.5
  n = 5  
  X = c(0:n) 
  f0 = dbinom(X, n, p0)
  f1 = dbinom(X, n, p1) 
  plot(X,f0, type="b", ylab="pmf")
  points(X,f1,col=2, type="b")

# b)  
  for(i in X)
  print(sum(dbinom(c(i:n), n, p0))) 

#  1 0.7626953 0.3671875 0.1035156 0.015625 0.0009765625

# If you use pbinom(q,..., lower.tail=F), you'll get the wrong answers, because it 
# does not include the probability of q itself:  
  pbinom(0:5, n, p0, lower.tail=F)
# 0.7626953125 0.3671875000 0.1035156250 0.0156250000 0.0009765625 0.0000000000

# c) The RR is {X=4 and X=5}              
  RR = c(4,5) 
 
# d)    
    sum(dbinom(RR,n , p1))                  # power = pr(x > xc | H1=T) = 0.1875

#########################################################################

# PART II

   rm(list=ls(all=TRUE))
   a = 4  
   n = 6 
   y.m = matrix(nrow=a, ncol=n)         # rows = treatment, col = replication
   y.m = matrix(c(90.3, 89.2, 98.2, 93.9, 87.4, 97.9,                   # X = 1
                  92.5, 89.5, 90.6, 94.7, 87.0, 95.8,                   # X = 2
                  85.5, 90.8, 89.6, 86.2, 88.0, 93.4,                   # X = 3
                  82.5, 89.5, 85.6, 87.4, 78.9, 90.7),nrow=a, byrow=T)  # X = 4 
   y = t(y.m)
   y = as.vector(y)

   X = rep(1:a, each=n)
   
   lm.1 = lm(y ~ as.factor(X))
   summary.lm(lm.1)
   summary.aov(lm.1)

# e)            
   for(i in 1:(a-1)){
   for(j in (i+1):a){
   print(c(i,j,t.test(y[X==i], y[X==j])$p.value))
   }}

# 1.0000000 2.0000000 0.6345296
# 1.0000000 3.0000000 0.1154706
# 1.00000000 4.00000000 0.02207794    mu1 and mu4 are different
# 2.0000000 3.0000000 0.1583166
# 2.00000000 4.00000000 0.02739745    mu2 and mu4 are different
# 3.0000000 4.0000000 0.1837578

# f)                          

#  set.seed(123)
#  ntrial = 100 
#  CNT = 0
#  for(trial in 1:ntrial){
    set.seed(5) 
    y.m = matrix(nrow=a, ncol=n)
    for(i in 1:a)
    y.m[i,] = rnorm(n,0,1)
    y = t(y.m)
    y = as.vector(y)
    lm.1 = lm(y ~ as.factor(X))
    tuk.1 = TukeyHSD(aov(lm.1), conf.level=0.95)
    CI = tuk.1[[1]] 
   
       cnt = 0
       for (i in 1:6){                
       if (CI[i,2] > 0 | CI[i,3] < 0) 
       cnt = cnt+1
       }
       cnt                              # 1 

       if(!cnt)
       CNT = CNT + 1                    # at least 1 CI missed mu
#  }
#  CNT                                   # 97

# Uncomment the commented lines, and comment-out the set.seed line, and run the code.
 
# One moral of this lab is to learn how to compute power.
# The other moral is to make you aware of the problem of multiple hypothesis testing,
# and Tukey's solution to it.


